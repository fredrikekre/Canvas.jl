##################
# Canvas Objects #
##################
abstract type CanvasObject end

id(x) = x
id(x::CanvasObject) = x.id
namefield(x) = nothing

function Base.show(io::IO, o::CanvasObject)
    if get(io, :compact, false)
        uri_id = namefield(o)
        if uri_id === nothing
            print(io, typeof(o), "(â€¦)")
        else
            print(io, typeof(o), "($(repr(uri_id)))")
        end
    else
        print(io, "$(typeof(o)) (all fields are Union{T,Nothing}):")
        for field in fieldnames(typeof(o))
            val = getfield(o, field)
            if !(val === nothing)
                println(io)
                print(io, "  $field: ")
                if isa(val, Vector)
                    print(io, typeof(val))
                else
                    show(IOContext(io, :compact => true), val)
                end
            end
        end
    end
end

include("autogenerated_objects.jl")

########################
## Extra constructors ##
########################

Course(id::Int) = Course(Dict("id" => id))

File(id::Int) = File(Dict("id" => id))
